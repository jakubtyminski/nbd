1. MATCH (from:town{name:'Darjeeling'}),(to:peak{name:'Sandakphu'}) 
   WITH from,to 
   MATCH path= ShortestPath((from)-[*]-(to)) 
   RETURN path

2. MATCH (source:town {name: "Darjeeling"}), (target:peak {name: "Sandakphu"}), p = allShortestPaths((source)-[*]->(target))
   WITH p, relationships(p) AS rel
   WHERE ALL (r in rel WHERE r.winter = "true")
   RETURN p, rel

3. MATCH p = (source:town {name: "Darjeeling"})-[r*]->(target:peak {name: "Sandakphu"})
   UNWIND r as rel
   WITH p, COLLECT(rel.distance) AS distances
   WITH p, reduce(acc = 0, d in distances | acc + d) as distance
   RETURN p, distance
   ORDER BY distance ASC

4. MATCH (f:Flight)-[:ORIGIN]->(a:Airport) 
   RETURN a, count(f) AS cnt 
   ORDER BY cnt DESC

   ^Tutaj nie widać żadnych wyników

5. MATCH (a:Airport)<-[:ORIGIN]-(f:Flight)
   WITH a, count(f) AS loty
   RETURN a, loty
   ORDER BY loty ASC

6. MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport)
   WHERE REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) < 3000
   RETURN p

7. MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
   WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS price
   RETURN p, price
   ORDER BY price DESC

   ^Tutaj nie widać żadnych wyników

8. MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
   WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS price
   RETURN p, price
   ORDER BY price ASC 
   LIMIT 1

   ^Tutaj nie widać żadnych wyników tak samo jak wyżej

9. MATCH (a:Airport)<-[:ORIGIN]-(f:Flight) 
   MATCH (b:Airport)<-[:DESTINATION]-(f:Flight) 
   UNWIND [a, b] as c return f.airline, count(DISTINCT c.name) 
   ORDER BY count(DISTINCT c.name) DESC

10. MATCH p = (a1:Airport)<-[r1:ORIGIN]-(f1:Flight)-[r2:DESTINATION]->(a2:Airport)<-[r3:ORIGIN]-(f2:Flight)-[r4:DESTINATION]->(a3:Airport)
    WHERE not(a1=a2) AND not(a1=a3) AND not(a2=a3)
    WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | acc + [(n)<-[:ASSIGN]-(ticket {class: 'economy'}) | ticket.price][0]) AS price
    RETURN p, price
    ORDER BY price ASC LIMIT 1

